#!/bin/bash

set -e
set -o pipefail

<%
  if p('cf_mysql.mysql.disable_auto_sst')
    disable_sst_string = 'DISABLE_SST=1'
  else
    disable_sst_string = 'DISABLE_SST=0'
  end

  if p('cf_mysql.mysql.interrupt_notify_cmd')
    disable_sst_string << " INTERRUPT_NOTIFY_CMD='#{p('cf_mysql.mysql.interrupt_notify_cmd')}'"
  end
%>
export TMPDIR=/var/vcap/data/mysql/tmp
export MARIADB_JOB_DIR=/var/vcap/jobs/mysql
LOG_DIR=/var/vcap/sys/log/mysql
LOG_FILE=$LOG_DIR/mariadb_ctrl.combined.log
SERVER_AUDIT_LOG_DIR=/var/vcap/store/mysql_audit_logs
JOB_INDEX=<%= index %>
CONFIG_FILE=$MARIADB_JOB_DIR/config/mariadb_ctl_config.yml
MARIADB_CTRL_PACKAGE=/var/vcap/packages/mariadb_ctrl
PROC_NAME=mariadb_ctl
RUN_DIR=/var/vcap/sys/run/$PROC_NAME
PIDFILE=$RUN_DIR/$PROC_NAME.pid

source /var/vcap/packages/cf-mysql-common/pid_utils.sh
source /var/vcap/packages/cf-mysql-common/logging.sh

output_to_logfiles ${LOG_DIR}

# logrotate audit logs
ln -sf /var/vcap/jobs/mysql/config/mysql_audit_logs.logrotate /etc/logrotate.d/mysql_audit_logs

# add xtrabackup to path
export PATH=$PATH:/var/vcap/packages/xtrabackup/bin

# add perl libraries to perl env
export PERL5LIB=$PERL5LIB:/var/vcap/packages/xtrabackup/lib/perl/5.18.2

ulimit -n <%= p('cf_mysql.mysql.max_open_files') %>

if [[ ! -d "$RUN_DIR" ]]; then
  mkdir -p $RUN_DIR
fi
chown -R vcap:vcap $RUN_DIR

case $1 in

  # The start script must always exit 0 if there's a chance Maria could start successfully,
  # as if monit sees a pid for Maria but this script exited with error, it will assume
  # someone else started the process in the background.
  # This will latch the status to "Execution failed" until someone manually calls
  # monit unmonitor && monit monitor, at which point monit would find the pid and reset the status to 'running'

  start)
    # Ensure that if IPsec is present, it is running before we try to start
    set +e
    ipsec_path=$(ls /var/vcap/packages/strongswan*/sbin/ipsec | head -1)
    ipsec_monit_job=$(/var/vcap/bosh/bin/monit summary | grep ipsec)
    if [ -n "${ipsec_monit_job}" ]; then
      $ipsec_path status
      ipsec_status=$?

      if [ ${ipsec_status} -ne 0 ]; then
        echo "Exiting for restart because IPsec is present but not yet running"
        exit 1
      fi
    fi
    set -e

    # WORKAROUND: monit may attempt to run this script multiple times if mysqld does not start in time.
    # Ensure that running this script multiple times does not spawn multiple copies of _ctrl
    LAUNCHER_NAME=mariadb_ctl_launcher
    LAUNCHER_PID_FILE=$RUN_DIR/$LAUNCHER_NAME.pid
    pid_guard $LAUNCHER_PID_FILE $LAUNCHER_NAME

    echo "Checking for existing instance of $PROC_NAME"
    pid_guard $PIDFILE $PROC_NAME

    <% if_p('cf_mysql.mysql.server_audit_events') do |_| %>
    mkdir -p ${SERVER_AUDIT_LOG_DIR}
    chown vcap:vcap ${SERVER_AUDIT_LOG_DIR}
    <% end %>

    cd $MARIADB_CTRL_PACKAGE

    echo "start script: starting mariadb_ctrl..."
    su - vcap -c -o pipefail \
    "<%= disable_sst_string %> PATH=$PATH PERL5LIB=$PERL5LIB $MARIADB_CTRL_PACKAGE/bin/mariadb_ctrl \
             -configPath=$CONFIG_FILE \
             >> $LOG_FILE 2>&1" &

    echo $! > $LAUNCHER_PID_FILE

    echo "start script: completed starting mariadb_ctrl."
    ;;

  stop)
    echo "stop script: stopping mariadb_ctrl..."

    echo "stop script: stopping node $JOB_INDEX"
    /var/vcap/packages/mariadb/support-files/mysql.server stop --pid-file=/var/vcap/sys/run/mysql/mysql.pid
    rm $PIDFILE
    echo "stop script: completed stopping mariadb_ctrl"
    ;;

  *)
    echo "Usage: mysql_ctl {start|stop}"
    ;;

esac
