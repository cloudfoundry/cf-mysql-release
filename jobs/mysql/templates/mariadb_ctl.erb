#!/bin/bash -e

set -e

export MARIADB_JOB_DIR=/var/vcap/jobs/mysql
RUN_DIR=/var/vcap/sys/run/mysql
datadir=/var/vcap/store/mysql
LOG_DIR=/var/vcap/sys/log/mysql
LOG_FILE=$LOG_DIR/maria-ctl.log
CONFIG_DIR=/etc/mysql
export JOB_INDEX=<%= index %>
STATE_FILE=/var/vcap/store/mysql/state.txt
MYSQL_DAEMON_FILE=/var/vcap/packages/mariadb_ctrl/mysql_daemon.sh
MYSQL_CLIENT_FILE=/var/vcap/packages/mariadb/bin/mysql
MYSQL_SERVER_FILE=/var/vcap/packages/mariadb/support-files/mysql.server
DB_SEED_SCRIPT_FILE=$MARIADB_JOB_DIR/bin/mysql_database_seed.sh
package_dir=/var/vcap/packages/mariadb_ctrl
executable_name=mariadb_ctrl-executable
MYSQL_UPGRADE_SCRIPT_FILE=$package_dir/mysql_upgrade.sh
MYSQL_SHOW_DATABASES_SCRIPT_FILE=$package_dir/show_databases.sh

export MY_NAME=mariadb_ctl
export RUN_DIR=/var/vcap/sys/run/$MY_NAME
export PIDFILE=$RUN_DIR/$MY_NAME.pid

DATABASE_SEED_ATTEMPTS=30

source /var/vcap/packages/common/utils.sh

# add mysql to path
if [ ! -f /usr/local/bin/mysql ]; then
  log "Adding mysql to path"
  ln -s /var/vcap/packages/mariadb/bin/mysql /usr/local/bin
fi

# add xtrabackup to path
export PATH=$PATH:/var/vcap/packages/xtrabackup/bin

# add perl libraries to perl env
export PERL5LIB=$PERL5LIB:/var/vcap/packages/xtrabackup/lib/perl/5.18.2

case $1 in

  # The start script must always exit 0 if there's a chance Maria could start successfully,
  # as if monit sees a pid for Maria but this script exited with error, it will assume
  # someone else started the process in the background.
  # This will latch the status to "Execution failed" until someone manually calls
  # monit unmonitor && monit monitor, at which point monit would find the pid and reset the status to 'running'

  start)

    if [[ ! -d "$RUN_DIR" ]]; then
      log "start script: directory $RUN_DIR does not exist, creating it now"
      mkdir -p $RUN_DIR
    fi

    log "start script: checking for existing instance of $MY_NAME"
    set +e
    $(source /var/vcap/packages/common/utils.sh; pid_guard $PIDFILE $MY_NAME)
    pg_exit_code=$?
    log "start script: pg_exit_code: $pg_exit_code"
    if [ $pg_exit_code -eq 1 ]; then
      log "start script: $MY_NAME already running. Exiting 0 so that monit doesn't think that execution failed"
      exit 0
    fi
    set -e

    log "start script: writing pid $$ for $MY_NAME to $PIDFILE"
    echo $$ > $PIDFILE

    log "start script: checking if mysqld_safe is already running... "
    set +e
    pgrep -f /var/vcap/packages/mariadb/bin/mysqld_safe
    result_code=$?
    set -e
    # Exit code of 0 means we did find a process, so we should exit.
    if [ $result_code -eq 0 ]; then
      log "start script: mysqld_safe already running - exiting with 0 so that monit doesn't think that execution failed"
      exit 0
    else
      log "start script: mysqld_safe not already running - continue"
    fi

    # Start syslog forwarding
    /var/vcap/packages/syslog_aggregator/setup_syslog_forwarder.sh $MARIADB_JOB_DIR/config

    mkdir -p $LOG_DIR
    touch $LOG_FILE
    chown vcap:vcap $LOG_FILE
    date >> $LOG_FILE 2>> $LOG_FILE

    # It is surprisingly hard to get the config file location passed in
    # on the command line to the mysql.server script. This is easier.
    mkdir -p $CONFIG_DIR
    rm -f /etc/my.cnf
    rm -f $CONFIG_DIR/my.cnf
    ln -sf $MARIADB_JOB_DIR/config/my.cnf $CONFIG_DIR/my.cnf

    if ! test -d ${datadir}; then
      log "start script: making ${datadir} and running /var/vcap/packages/mariadb/scripts/mysql_install_db"
      mkdir -p ${datadir}
      /var/vcap/packages/mariadb/scripts/mysql_install_db \
             --basedir=/var/vcap/packages/mariadb --user=vcap \
             --datadir=${datadir} >> $LOG_FILE 2>> $LOG_FILE
    fi
    chown -R vcap:vcap ${datadir}

    cd $package_dir

    <% node_ip = spec.networks.send(p('network_name')).ip %>

    log "start script: starting mariadb_ctrl..."
    $package_dir/$executable_name \
             -logFile=$LOG_FILE \
             -stateFile=$STATE_FILE \
             -mysqlDaemon=$MYSQL_DAEMON_FILE \
             -mysqlClient=$MYSQL_CLIENT_FILE \
             -mysqlUser=<%= p('admin_username')%> \
             -mysqlPassword=<%= p('admin_password')%> \
             -jobIndex=$JOB_INDEX \
             -dbSeedScript=$DB_SEED_SCRIPT_FILE \
             -upgradeScriptPath=$MYSQL_UPGRADE_SCRIPT_FILE \
             -showDatabasesScriptPath=$MYSQL_SHOW_DATABASES_SCRIPT_FILE \
             -numberOfNodes=<%= p('cluster_ips').length %> \
             -clusterIps=<%= (p('cluster_ips') - [node_ip]).join(',') %> \
             -maxDatabaseSeedTries=$DATABASE_SEED_ATTEMPTS
             >> $LOG_FILE 2>> $LOG_FILE


    log "start script: completed starting mariadb_ctrl."
    ;;

  stop)
    log "stop script: stopping mariadb_ctrl..."
    mkdir -p $LOG_DIR
    date >> $LOG_FILE 2>> $LOG_FILE
    log "stop script: stopping node $JOB_INDEX" >> $LOG_FILE
    /var/vcap/packages/mariadb/support-files/mysql.server stop >> $LOG_FILE 2>> $LOG_FILE

    log "stop script: completed stopping mariadb_ctrl"
    ;;

  *)
    echo "Usage: mysql_ctl {start|stop}"
    ;;

esac
