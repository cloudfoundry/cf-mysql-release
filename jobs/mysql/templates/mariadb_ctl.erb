#!/bin/bash -e

export MARIADB_JOB_DIR=/var/vcap/jobs/mysql
RUN_DIR=/var/vcap/sys/run/mysql
datadir=/var/vcap/store/mysql
LOG_DIR=/var/vcap/sys/log/mysql
LOG_FILE=$LOG_DIR/maria-ctl.log
CONFIG_DIR=/etc/mysql
export JOB_INDEX=<%= index %>

case $1 in

  start)
    mkdir -p $LOG_DIR
    date >> $LOG_FILE 2>> $LOG_FILE

    # It is surprisingly hard to get the config file location passed in
    # on the command line to the mysql.server script. This is easier.
    mkdir -p $CONFIG_DIR
    rm -f /etc/my.cnf
    rm -f $CONFIG_DIR/my.cnf
    ln -sf $MARIADB_JOB_DIR/config/my.cnf $CONFIG_DIR/my.cnf

    if ! test -d ${datadir}; then
      mkdir -p ${datadir}
      /var/vcap/packages/mariadb/scripts/mysql_install_db \
             --basedir=/var/vcap/packages/mariadb --user=vcap \
             --datadir=${datadir} >> $LOG_FILE 2>> $LOG_FILE
    fi
    chown -R vcap:vcap ${datadir}

    if [ $JOB_INDEX -eq 0 ]; then
      echo "Starting up as seed node $JOB_INDEX" >> $LOG_FILE
      echo "Checking if any other nodes are up" >> $LOG_FILE
      if ( <%= p('cluster_ips')[1..-1].map{|i| "nc -z #{i} #{p('port')} >> $LOG_FILE 2>> $LOG_FILE"}.join(" || ") %> ); then
        echo "One or more other nodes are running, joining cluster..." >> $LOG_FILE
        /var/vcap/packages/mariadb/support-files/mysql.server start >> $LOG_FILE 2>> $LOG_FILE
      else
        echo "No other nodes are running, boostrapping cluster..." >> $LOG_FILE
        /var/vcap/packages/mariadb/support-files/mysql.server bootstrap >> $LOG_FILE 2>> $LOG_FILE
      fi
    else
      echo "Starting up as non-seed node $JOB_INDEX" >> $LOG_FILE
      /var/vcap/packages/mariadb/support-files/mysql.server start >> $LOG_FILE 2>> $LOG_FILE
    fi

    # Run mysql_upgrade and conditionally stop if update occurs or an error occurs besides "already upgraded"
    set +e
    UPGRADE_OUTPUT=$(/var/vcap/packages/mariadb/bin/mysql_upgrade -u<%= properties.admin_username %> -p<%= properties.admin_password %>)
    UPGRADE_EXIT_CODE=$?
    set -e

    echo "UPGRADE_OUTPUT: $UPGRADE_OUTPUT" >> $LOG_FILE 2>> $LOG_FILE
    echo "UPGRADE_EXIT_CODE: $UPGRADE_EXIT_CODE" >> $LOG_FILE 2>> $LOG_FILE

    # It's possible that the node hasn't come up yet or has not yet been able to join the cluster, for various reasons.
    # We cannot know all of these, but we've added their signatures to the regex below.
    # If they happen, we prefer to skip the restart and just let the node continue its startup sequence.
    # mysql_upgrade will have to wait until the next time monit start is run, which is not ideal, but is better than either
    # flapping or having the control script block waiting for the cluster to be healthy.
    if [ $UPGRADE_EXIT_CODE != 1 ] || ! [[ $UPGRADE_OUTPUT =~ already\ upgraded|Unknown\ command|WSREP\ has\ not\ yet\ prepared\ node ]]; then
      echo "Stopping node after mysql_upgrade $JOB_INDEX" >> $LOG_FILE
      /var/vcap/packages/mariadb/support-files/mysql.server stop >> $LOG_FILE 2>> $LOG_FILE
    fi
    ;;

  stop)
    mkdir -p $LOG_DIR
    date >> $LOG_FILE 2>> $LOG_FILE
    echo "Stopping node $JOB_INDEX" >> $LOG_FILE
    /var/vcap/packages/mariadb/support-files/mysql.server stop >> $LOG_FILE 2>> $LOG_FILE
    ;;

  *)
    echo "Usage: mysql_ctl {start|stop}"
    ;;

esac
